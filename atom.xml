<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huawei&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/d9115fa39cb52b129607f1045d241083</icon>
  <subtitle>流年匆忙，对错何妨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-22T15:03:17.965Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>huawei</name>
    <email>whw19950510@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阴雨天的新学期</title>
    <link href="http://yoursite.com/2018/01/22/%E9%98%B4%E9%9B%A8%E5%A4%A9%E7%9A%84%E6%96%B0%E5%AD%A6%E6%9C%9F.html"/>
    <id>http://yoursite.com/2018/01/22/阴雨天的新学期.html</id>
    <published>2018-01-22T14:43:36.000Z</published>
    <updated>2018-01-22T15:03:17.965Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="新学期换个心情生活"><a href="#新学期换个心情生活" class="headerlink" title="新学期换个心情生活"></a>新学期换个心情生活</h2><p>麦屯淅淅沥沥下了一夜的雨，我也一夜都没睡好。认真准备了一周的面试一面结果感觉一般，面试官人好侥幸给我过了。再接再厉！新学期认真上课，好好做项目，能少一点来自现实的压力，希望暑假早一点到来，毕竟这个寒假实在是太煎熬了。<br><a id="more"></a></p><h2 id="音乐分享"><a href="#音乐分享" class="headerlink" title="音乐分享"></a>音乐分享</h2><p>日经安利贴。忙到没有时间看综艺节目了，但是刷微博还是看到张韶涵的翻唱在《歌手》刷了屏。虽然上了高中以后就听古风听得多了，但是有些音乐什么时候想起来都是那段生活的回忆吧，比如初三初四最拼的时候，听广播里放一首《隐形的翅膀》就觉得特别励志，然后自我安慰着自己那与投入不成正比的努力，后来这首歌出现在北京高考作文试题里，让在那个年纪天天沉迷高考满分作文的我对这首歌愈发喜爱。它代表了一种坚持和希望吧，正如歌词所写：<strong>愿所有梦想都开花</strong>。再比如在北欧看极光的时候放一首《欧若拉》也是极其应景的，其他诸如《看得最远的地方》《遗失的美好》不一而足。<br>想来《隐形的翅膀》也是她自己人生的写照吧，虽然历经种种波折指责，在人生的最高峰最辉煌的时刻跌落，但是只要心中有坚定的信念和对生活的憧憬，终有一天能看到梦想的绽放。<br><blockquote><p>每一次都在徘徊孤单中坚强<br>每一次就算很受伤也不闪泪光<br>我知道我一直有双隐形的翅膀<br>带我飞飞过绝望<br>不去想他们拥有美丽的太阳<br>我看见每天的夕阳也会有变化<br>我知道我一直有双隐形的翅膀<br>带我飞给我希望</p></blockquote></p><div class="aplayer" data-id="36871866" data-server="netease" data-type="song"></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新学期换个心情生活&quot;&gt;&lt;a href=&quot;#新学期换个心情生活&quot; class=&quot;headerlink&quot; title=&quot;新学期换个心情生活&quot;&gt;&lt;/a&gt;新学期换个心情生活&lt;/h2&gt;&lt;p&gt;麦屯淅淅沥沥下了一夜的雨，我也一夜都没睡好。认真准备了一周的面试一面结果感觉一般，面试官人好侥幸给我过了。再接再厉！新学期认真上课，好好做项目，能少一点来自现实的压力，希望暑假早一点到来，毕竟这个寒假实在是太煎熬了。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="音乐" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>React review</title>
    <link href="http://yoursite.com/2018/01/19/React%20review.html"/>
    <id>http://yoursite.com/2018/01/19/React review.html</id>
    <published>2018-01-19T23:05:18.000Z</published>
    <updated>2018-01-22T15:03:38.277Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="React解决了什么问题"><a href="#React解决了什么问题" class="headerlink" title="React解决了什么问题"></a>React解决了什么问题</h2><p>MVC架构的双向绑定以及一对多的关系容易造成连级/联动（Cascading）修改，对于代码的调试和维护都成问题。<a href="https://zhuanlan.zhihu.com/p/21324696" target="_blank" rel="noopener">Problem</a><br><a id="more"></a></p><h2 id="如何设计一个好的Component"><a href="#如何设计一个好的Component" class="headerlink" title="如何设计一个好的Component"></a>如何设计一个好的Component</h2><p>高内聚，低耦合<br>React组件设计推崇的是“组合”，而非“继承”。例如你的页面需要一个表单组件，表单中需要有输入框，按钮，列表，单选框等。那么在开发中你不应该只开发一（整）个表单组件（<form>），而是应该开发若干个单一功能的组件，比如输入框<input>、提交按钮<submit>、单选框<checkbox>等，最后再将它们组合起来。这其中的重点是<strong>每个组件仅做一件事</strong>。<br>设计模式：Higher-Order Components 和 Container Components 和 Stateless Components.</checkbox></submit></form></p><h2 id="什么时候render调用，什么时候修改DOM"><a href="#什么时候render调用，什么时候修改DOM" class="headerlink" title="什么时候render调用，什么时候修改DOM"></a>什么时候render调用，什么时候修改DOM</h2><p>毫无疑问Render是在组件 state 发生改变时候被调用。无论是通过 setState 函数改变组件自身的state值，还是继承的 props 属性发生改变都会造成render函数被调用，即使改变的前后值都是一样的。shouldComponentUpdate默认都返回true，可以重写进行优化。<br>React组件中存在两类DOM，一类是众所周知的Virtual DOM，相信大家也耳熟能详了；另一类就是浏览器中的真实DOM（Real DOM/Native DOM）。React的Render函数被调用之后，React立即根据props或者state重新创建了一颗Virtual DOM Tree，虽然每一次调用时都重新创建，但因为在内存中创建DOM树其实是非常快且不影响性能的，所以这一步的开销并不大。而Virtual DOM的更新并不意味这Real DOM的更新，接下来的事情也是大家知道的，React采用算法将Virtual DOM和Real DOM进行对比，找出需要更新的最小步骤，此时Real DOM才可能发生修改。<br>每一次的state更改都会使得render函数被调用，但页面的DOM不一定会发生修改</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Mounting, Updating, Unmounting.<br>Mounting:<br>constructor,componentWillMount(在mount前调用可操作state),render(只能渲染DOM),componentDidMount(<strong>如果你有第三方操作DOM的类库需要初始化（类似于jQuery，Bootstrap的一些组件）操作DOM、或者请求异步数据，都应该放在这个步骤中做</strong>)<br>Updating:<br>componentWillReceiveProps,在这里你可以拿到即将改变的状态，可以在这一步中通过setState方法设置state;shouldComponentUpdate,<strong>componentWillUpdate(不能改变state)</strong>;render();componentDidUpdate,更新DOM执行请求.<br>Unmounting<br>componentWillUnmount<br>有哪些生命周期是允许设置state的？</p><h2 id="Webpack相关"><a href="#Webpack相关" class="headerlink" title="Webpack相关"></a>Webpack相关</h2><p>Webpack如何打包输出多个文件？<br>webpack打包时如何工作的？<br>如何解决循环引用的问题<br>在什么情况下需要打包输出多个文件？<br>loader和plugin的差别:loader 用于加载某些资源文件;plugin 用于扩展webpack的功能。它直接作用于 webpack，扩展了它的功能。<br>你觉得使用过什么高级技巧吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React解决了什么问题&quot;&gt;&lt;a href=&quot;#React解决了什么问题&quot; class=&quot;headerlink&quot; title=&quot;React解决了什么问题&quot;&gt;&lt;/a&gt;React解决了什么问题&lt;/h2&gt;&lt;p&gt;MVC架构的双向绑定以及一对多的关系容易造成连级/联动（Cascading）修改，对于代码的调试和维护都成问题。&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21324696&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Problem&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>转-面试感想</title>
    <link href="http://yoursite.com/2018/01/19/%E9%9D%A2%E8%AF%95%E5%BF%83%E5%BE%97.html"/>
    <id>http://yoursite.com/2018/01/19/面试心得.html</id>
    <published>2018-01-19T22:41:18.000Z</published>
    <updated>2018-01-22T15:03:26.023Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="转自知乎日报"><a href="#转自知乎日报" class="headerlink" title="转自知乎日报"></a>转自知乎日报</h2><a id="more"></a><p>如果你想去更大的平台发展，比如微软、阿里、Airbnb、亚马逊，即使是前端的岗位，在面试时（甚至每一轮）也会考验一些算法题目（虽然我觉得没什么道理）。总的来说面试算法题的公司一半一半吧，另一半倾向于面试前端相关的实战练习题。外企基本不考察你的前端能力，只考虑你的算法和数据结构能力（别问我是怎么知道的，我的面试史就是一部血泪史）。所以前端同学懂一些基本的算法也是有必要的。我不知道其他语言的程序员在找工作时面试的算法题有哪些，但前端的算法面试题还算是比较基础并且不难（至少相对于我而言）。我也算是面霸了，所以分享一些个人经验，同时也是记录下来写给将来的有需要的自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;转自知乎日报&quot;&gt;&lt;a href=&quot;#转自知乎日报&quot; class=&quot;headerlink&quot; title=&quot;转自知乎日报&quot;&gt;&lt;/a&gt;转自知乎日报&lt;/h2&gt;
    
    </summary>
    
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Promise</title>
    <link href="http://yoursite.com/2018/01/18/Understanding-Promise.html"/>
    <id>http://yoursite.com/2018/01/18/Understanding-Promise.html</id>
    <published>2018-01-18T22:16:47.000Z</published>
    <updated>2018-01-18T22:56:53.669Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>回调函数不允许使用return/throw, callback hell。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>ES6 原生提供了 Promise 对象。<br>所谓 Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理。<br><a id="more"></a><br>Promise 对象有以下两个特点。</p><ul><li>对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。<strong>就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同</strong>，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</li></ul><h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p><strong>当异步方法比如这里的setTimeout()，或者ajax请求、DOM事件执行的时候，会交由浏览器内核的其他模块去管理。当异步的方法满足触发条件后，该模块就会将方法推入到一个任务队列（task queue）中，当主线程代码执行完毕处于空闲状态的时候，就会去检查任务队列，将队列中第一个任务入栈执行，完毕后继续检查任务队列，如此循环。前提条件是主线程处于空闲状态，这就是事件循环的模型.</strong><br>Timer2延迟100ms，所以会早于Timer1被添加到队列排头。而主线程此时处于空闲状态，所以会检查任务队列是否有待执行的任务。此时会将Timer2回调中的console.log()执行，控制台打印’world’，然后执行栈空闲后继续检查任务队列，将Timer1的代码压入执行栈中执行，控制台打印’hello’，清空执行栈，此时任务队列为空，执行结束。还是根据定时器时间决定哪个先进主线程</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回调函数不允许使用return/throw, callback hell。&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;ES6 原生提供了 Promise 对象。&lt;br&gt;所谓 Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-binary-search-practice-4</title>
    <link href="http://yoursite.com/2018/01/17/leetcode-binary-search-practice-4.html"/>
    <id>http://yoursite.com/2018/01/17/leetcode-binary-search-practice-4.html</id>
    <published>2018-01-17T23:36:01.000Z</published>
    <updated>2018-01-18T03:16:03.825Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="209-Minimum-Size-Subarray-Sum"><a href="#209-Minimum-Size-Subarray-Sum" class="headerlink" title="209. Minimum Size Subarray Sum"></a>209. Minimum Size Subarray Sum</h3><p>Can use 2 pointers with <code>O(n)</code> complexity. Notice that when end read the end of array should continue to move the start pointer.<br><a id="more"></a></p><h3 id="392-Is-subsequence"><a href="#392-Is-subsequence" class="headerlink" title="392. Is subsequence"></a>392. Is subsequence</h3><ol><li>Use DP. very simple 1D DP.Notice that should check whether pattern string has already reached the end.</li><li>Use preprocessing &amp; binary search for a lot of pattern string. eg: record all positions of matched string, then use position keep tracking its first appearing position.</li><li>Can use a Trie to record the current all pattern string. Now comes another string, find longest prefix in the trie and starts from here to match with the base string.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;209-Minimum-Size-Subarray-Sum&quot;&gt;&lt;a href=&quot;#209-Minimum-Size-Subarray-Sum&quot; class=&quot;headerlink&quot; title=&quot;209. Minimum Size Subarray Sum&quot;&gt;&lt;/a&gt;209. Minimum Size Subarray Sum&lt;/h3&gt;&lt;p&gt;Can use 2 pointers with &lt;code&gt;O(n)&lt;/code&gt; complexity. Notice that when end read the end of array should continue to move the start pointer.&lt;br&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="binary search" scheme="http://yoursite.com/tags/binary-search/"/>
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode binary search practice 3</title>
    <link href="http://yoursite.com/2018/01/15/leetcode-binary-search-practice-3.html"/>
    <id>http://yoursite.com/2018/01/15/leetcode-binary-search-practice-3.html</id>
    <published>2018-01-16T02:48:55.000Z</published>
    <updated>2018-01-17T23:36:18.321Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="162-Find-Peak-Element"><a href="#162-Find-Peak-Element" class="headerlink" title="162. Find Peak Element"></a>162. Find Peak Element</h3><p>There may exsists many peak elements in array, only need to return 1 index. If it’s a sorted array, answer will be first or last element.<br>random select 1 element, if not peak element, if left neighbors larger than it, peak will exists in left part, otherwise right part. Notice the edge case where length == 2, then simply comes to start/end.</p><h3 id="34-Search-for-a-Range"><a href="#34-Search-for-a-Range" class="headerlink" title="34. Search for a Range"></a>34. Search for a Range</h3><p>Simple binary search to find initial value, then search for the range. My solution is a little complex to loop to boundary, worst case go to <code>O(n)</code>. actually, <code>start = find(target), end = find(target + 1) -1</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;162-Find-Peak-Element&quot;&gt;&lt;a href=&quot;#162-Find-Peak-Element&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="binary search" scheme="http://yoursite.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>莫愁前路无知己</title>
    <link href="http://yoursite.com/2018/01/15/%E8%8E%AB%E6%84%81%E5%89%8D%E8%B7%AF%E6%97%A0%E7%9F%A5%E5%B7%B1.html"/>
    <id>http://yoursite.com/2018/01/15/莫愁前路无知己.html</id>
    <published>2018-01-16T01:02:40.000Z</published>
    <updated>2018-01-16T01:24:33.780Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="莫愁前路无知己"><a href="#莫愁前路无知己" class="headerlink" title="莫愁前路无知己"></a>莫愁前路无知己</h3><p>大雪下了一夜都没停，今天去湖边转了一圈整个湖水都冻住了，也算是奇景了。几对情侣走在浩渺茫茫的湖面上，应该是生命中很难忘的体验吧。<br>话别诗最有名的一句就是<br><blockquote><p>莫愁前路无知己，天下谁人不识君。</p></blockquote><br>语句中饱含着宽慰和豁达。然而相比送别我还是更喜欢重逢吧，即使是<br><blockquote><p>深知身在情长在，前尘不共彩云飞</p></blockquote><br>这种伤感的风格。</p><h3 id="家门口的雪人"><a href="#家门口的雪人" class="headerlink" title="家门口的雪人"></a>家门口的雪人</h3><p><img src="/assets/blogimgs/1.15snowman.jpg" width="80%" height="60%" alt="snowman"></p><h3 id="Lake-Mendota"><a href="#Lake-Mendota" class="headerlink" title="Lake Mendota"></a>Lake Mendota</h3><p><img src="/assets/blogimgs/1.15mendota2.jpg" width="80%" height="60%" alt="snowman"></p><h3 id="音乐分享"><a href="#音乐分享" class="headerlink" title="音乐分享"></a>音乐分享</h3><p>今天分享银临的<strong>《不老梦》</strong>。新专辑《蚍蜉渡海》也出了好久了，然而寄到家的时候我已经在美国了。。只能等回家听了。最喜欢这首歌的文案，一个很凄美、令人动容的爱情故事。也许这些故事也上演在我们身边吧。贴上银临自己的创作灵感。<br><a id="more"></a><br><blockquote><p>终南有坟，名不老。客奇之，问何故，言乃淮南翁主媗冢。<br>元光二年上巳，媗于渭水之滨遇振翊将军韩衿，悦之。明年，河水决濮阳，上发卒十万救决河，使衿督。媗送别，诉心意。衿以其年尚幼，婉拒之。<br>后三年，衿戍定襄，媗托尺素，书：妾已及笄。<br>复三年，媗随姊陵探长安，约结上左右。每逢衿，且喜且怯。<br>又三年，媗疾，久不愈。衿随大将军青击匈奴，媗恐不复见，追大军十余里，终力竭。呛血白衣，形销骨立。<br>元狩元年，淮南衡山事发，陵媗皆下狱。衿欲面之，叩未央宫，额血流地，上弗允。媗殒，衿亲葬于终南。<br>后长安有歌曰：茔茔蔓草，岁岁不老；风雨如晦，死生为谁。<br>终南有坟，名不老。</p></blockquote><br><blockquote><p>清明说：这首歌主题是“求不得”，但并不是不敢追寻才不得，而是努力了、尝试了，依然不可得。因为时代，因为环境，因为外界的桎梏和内心的枷锁。因为人在天命面前，总是渺小得可怜。纵使如此，依然不悔地去爱着，是怎样一种苍凉的勇气？是“知其不可而为之”，“虽千万人吾往矣”。</p></blockquote></p><div class="aplayer" data-id="421137682" data-server="netease" data-type="song"></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;莫愁前路无知己&quot;&gt;&lt;a href=&quot;#莫愁前路无知己&quot; class=&quot;headerlink&quot; title=&quot;莫愁前路无知己&quot;&gt;&lt;/a&gt;莫愁前路无知己&lt;/h3&gt;&lt;p&gt;大雪下了一夜都没停，今天去湖边转了一圈整个湖水都冻住了，也算是奇景了。几对情侣走在浩渺茫茫的湖面上，应该是生命中很难忘的体验吧。&lt;br&gt;话别诗最有名的一句就是&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;莫愁前路无知己，天下谁人不识君。&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;语句中饱含着宽慰和豁达。然而相比送别我还是更喜欢重逢吧，即使是&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;深知身在情长在，前尘不共彩云飞&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;这种伤感的风格。&lt;/p&gt;
&lt;h3 id=&quot;家门口的雪人&quot;&gt;&lt;a href=&quot;#家门口的雪人&quot; class=&quot;headerlink&quot; title=&quot;家门口的雪人&quot;&gt;&lt;/a&gt;家门口的雪人&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogimgs/1.15snowman.jpg&quot; width=&quot;80%&quot; height=&quot;60%&quot; alt=&quot;snowman&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Lake-Mendota&quot;&gt;&lt;a href=&quot;#Lake-Mendota&quot; class=&quot;headerlink&quot; title=&quot;Lake Mendota&quot;&gt;&lt;/a&gt;Lake Mendota&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogimgs/1.15mendota2.jpg&quot; width=&quot;80%&quot; height=&quot;60%&quot; alt=&quot;snowman&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;音乐分享&quot;&gt;&lt;a href=&quot;#音乐分享&quot; class=&quot;headerlink&quot; title=&quot;音乐分享&quot;&gt;&lt;/a&gt;音乐分享&lt;/h3&gt;&lt;p&gt;今天分享银临的&lt;strong&gt;《不老梦》&lt;/strong&gt;。新专辑《蚍蜉渡海》也出了好久了，然而寄到家的时候我已经在美国了。。只能等回家听了。最喜欢这首歌的文案，一个很凄美、令人动容的爱情故事。也许这些故事也上演在我们身边吧。贴上银临自己的创作灵感。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="音乐" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="古风" scheme="http://yoursite.com/tags/%E5%8F%A4%E9%A3%8E/"/>
    
  </entry>
  
  <entry>
    <title>JSP Student-system review</title>
    <link href="http://yoursite.com/2018/01/14/JSP-Student-system-review.html"/>
    <id>http://yoursite.com/2018/01/14/JSP-Student-system-review.html</id>
    <published>2018-01-15T00:50:40.000Z</published>
    <updated>2018-01-15T02:46:42.414Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Project-Review"><a href="#Project-Review" class="headerlink" title="Project Review"></a>Project Review</h2><p>Develop a simple <a href="https://github.com/whw19950510/Studentsystem" target="_blank" rel="noopener">student management system</a> using pure Servlet, MySql and Bootstrap. Basically supports CRUD functionality, ie: create, read, update, delete. Also supports search functionality. Need further improvement on high efficiency sql query, high concurrency and some consideration of loading balance.<br><a id="more"></a></p><h2 id="Understanding-of-MVC-design-patterns"><a href="#Understanding-of-MVC-design-patterns" class="headerlink" title="Understanding of MVC design patterns"></a>Understanding of MVC design patterns</h2><p>Some frenquently used j2ee functions, includes:</p><ul><li>request.getParameter(): get the parameter value in the HTML form(name property).</li><li>request.setAttribute/getAttribute(), used to retrieve value from request(send from 1 page to another).</li><li>dispatcher.forward(request, response): forward the request to some page, be careful with the dispatcher’s constructor should be passed into value of JSP/Servlet, which can cause different effects.<h2 id="Problem-met-in-project"><a href="#Problem-met-in-project" class="headerlink" title="Problem met in project"></a>Problem met in project</h2></li><li>When developing the update functionality, fail to update with no error show up. Try to show the id on the jsp page and found it always come to 0. Finally found that it’s due to not set up corresponding properties and set it to request attribute.</li><li>Have difficulty with the CSS coding to properly layout the button… Waste a lot of time to adjust the button to be aligned with each other. Need further understanding of display: inline/block property, float property and BOX model(making use of margin+padding).</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Project-Review&quot;&gt;&lt;a href=&quot;#Project-Review&quot; class=&quot;headerlink&quot; title=&quot;Project Review&quot;&gt;&lt;/a&gt;Project Review&lt;/h2&gt;&lt;p&gt;Develop a simple &lt;a href=&quot;https://github.com/whw19950510/Studentsystem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;student management system&lt;/a&gt; using pure Servlet, MySql and Bootstrap. Basically supports CRUD functionality, ie: create, read, update, delete. Also supports search functionality. Need further improvement on high efficiency sql query, high concurrency and some consideration of loading balance.&lt;br&gt;
    
    </summary>
    
    
      <category term="Java EE" scheme="http://yoursite.com/tags/Java-EE/"/>
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>雪夜</title>
    <link href="http://yoursite.com/2018/01/14/%E9%9B%AA%E5%A4%9C.html"/>
    <id>http://yoursite.com/2018/01/14/雪夜.html</id>
    <published>2018-01-15T00:17:24.000Z</published>
    <updated>2018-01-15T02:50:20.930Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="雪夜"><a href="#雪夜" class="headerlink" title="雪夜"></a>雪夜</h2><p>来之前就在知乎上看到过麦迪逊冬天很长，有的冬天一直持续到来年四五月份，海本们因此都练就了一小时雪中刨车的技能hhh。来了才知道名不虚传，午睡起来又开始洋洋洒洒地下雪。这的雪花像北方的雪，结成块的那种，像棉花糖，街上的雪聚在一起，风一吹像白色的沙一样，很好看。<br><img src="/assets/blogimgs/1.14snow.jpg" width="80%" height="60%" alt="Union South is snowing"></p><h2 id="音乐分享"><a href="#音乐分享" class="headerlink" title="音乐分享"></a>音乐分享</h2><p>静谧的雪夜，最适合思念。今天推荐<strong>《兔子先生》</strong>。开始以为是云泣原唱，后来才知道是洛天依的电子声。没事的时候去B站上翻了下那个<a href="https://www.bilibili.com/video/av2877056/" title="沙画视频" target="_blank" rel="noopener">沙画视频</a>。也是满满的泪点呢。<br>兔子先生大概也是小孩子自己吧。歌词和旋律都很朴素，但可能恰巧因为这种平素让人难以忘怀。<br><blockquote><p>流浪不是一个人的旅途，早点给自己找一个家，让自己的心不再漂泊。总有人会在你身旁，牵住你的手，帮你把那个不懂事的小孩子释放出来，抱住他，也亲吻他，让他舒舒服服躺在怀中，安心听她把兔子先生的故事讲完。</p></blockquote><br>好想听你们弹琴啊，希望五月快一点到来。<br><blockquote><a id="more"></a><p>小孩子问妈妈<br>兔子的家在哪里啊<br>妈妈笑着回答<br>月亮是兔子先生的故乡<br>小孩子问妈妈<br>兔子先生咋不回家<br>妈妈笑着回答<br>流浪是兔子先生的特长<br>小孩子嘟着嘴<br>说兔子先生怎么不听话<br>兔子公公 兔子婆婆<br>会想念他 会担心他<br>小孩小孩轻声说<br>啊兔子先生请你快回家<br>最爱你的爸爸妈妈<br>在那远空 盼望你啊<br>兔子先生笑着说<br>啊小孩小孩我也会想家<br>但渺小的我<br>流浪的步伐<br>还没法停下</p></blockquote></p><div class="aplayer" data-id="34614479" data-server="netease" data-type="song"></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;雪夜&quot;&gt;&lt;a href=&quot;#雪夜&quot; class=&quot;headerlink&quot; title=&quot;雪夜&quot;&gt;&lt;/a&gt;雪夜&lt;/h2&gt;&lt;p&gt;来之前就在知乎上看到过麦迪逊冬天很长，有的冬天一直持续到来年四五月份，海本们因此都练就了一小时雪中刨车的技能hhh。来了才知道名不虚传，午睡起来又开始洋洋洒洒地下雪。这的雪花像北方的雪，结成块的那种，像棉花糖，街上的雪聚在一起，风一吹像白色的沙一样，很好看。&lt;br&gt;&lt;img src=&quot;/assets/blogimgs/1.14snow.jpg&quot; width=&quot;80%&quot; height=&quot;60%&quot; alt=&quot;Union South is snowing&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;音乐分享&quot;&gt;&lt;a href=&quot;#音乐分享&quot; class=&quot;headerlink&quot; title=&quot;音乐分享&quot;&gt;&lt;/a&gt;音乐分享&lt;/h2&gt;&lt;p&gt;静谧的雪夜，最适合思念。今天推荐&lt;strong&gt;《兔子先生》&lt;/strong&gt;。开始以为是云泣原唱，后来才知道是洛天依的电子声。没事的时候去B站上翻了下那个&lt;a href=&quot;https://www.bilibili.com/video/av2877056/&quot; title=&quot;沙画视频&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;沙画视频&lt;/a&gt;。也是满满的泪点呢。&lt;br&gt;兔子先生大概也是小孩子自己吧。歌词和旋律都很朴素，但可能恰巧因为这种平素让人难以忘怀。&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;流浪不是一个人的旅途，早点给自己找一个家，让自己的心不再漂泊。总有人会在你身旁，牵住你的手，帮你把那个不懂事的小孩子释放出来，抱住他，也亲吻他，让他舒舒服服躺在怀中，安心听她把兔子先生的故事讲完。&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;好想听你们弹琴啊，希望五月快一点到来。&lt;br&gt;&lt;blockquote&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="音乐" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>leetcode binary search practice 2</title>
    <link href="http://yoursite.com/2018/01/14/leetcode-binary-search-practice-2.html"/>
    <id>http://yoursite.com/2018/01/14/leetcode-binary-search-practice-2.html</id>
    <published>2018-01-14T17:19:20.000Z</published>
    <updated>2018-01-14T17:41:35.392Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Binary-search-problems"><a href="#Binary-search-problems" class="headerlink" title="Binary search problems"></a>Binary search problems</h2><p>Today just practice some easy but typical problems, which use both binary search &amp;&amp; 2 pointers. Notice how to pick up pivot.<br><a id="more"></a></p><h3 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69.Sqrt(x)"></a>69.Sqrt(x)</h3><p>Met with this problem in an intrview before and I didn’t notice the type of number at that time…Should use an variable to record the number which is closest to <code>sqrt(x)</code> each time.</p><h3 id="349-167-Two-sum-in-sorted-array"><a href="#349-167-Two-sum-in-sorted-array" class="headerlink" title="349/167.Two sum in sorted array"></a>349/167.Two sum in sorted array</h3><p>Use 2 pointers can be more precise. Notice the condition judgement.</p><h3 id="74-Search-a-2D-matrix"><a href="#74-Search-a-2D-matrix" class="headerlink" title="74.Search a 2D matrix"></a>74.Search a 2D matrix</h3><p>Matrix has property of increasing like a single array. Thus can use binary search directly.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length ==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> row = matrix.length, col = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = row*col - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(start &lt; end) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = start + (end - start) /<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(matrix[mid/col][mid%col] == target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(matrix[mid/col][mid%col] &lt; target) &#123;</span><br><span class="line">    start = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    end = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(start == end &amp;&amp; matrix[start/col][start%col] == target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="240-Search-a-2D-matrix"><a href="#240-Search-a-2D-matrix" class="headerlink" title="240.Search a 2D matrix"></a>240.Search a 2D matrix</h3><p>I only make use of the increasing row property, use the right corner as pivot and search entire row or not, which leads to <code>O(mlog(n))</code> complexity. Better solution is also to use the column increasing property, shrink row/col index by 1 each time, which has <code>O(m+n)</code>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Binary-search-problems&quot;&gt;&lt;a href=&quot;#Binary-search-problems&quot; class=&quot;headerlink&quot; title=&quot;Binary search problems&quot;&gt;&lt;/a&gt;Binary search problems&lt;/h2&gt;&lt;p&gt;Today just practice some easy but typical problems, which use both binary search &amp;amp;&amp;amp; 2 pointers. Notice how to pick up pivot.&lt;br&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="binary search" scheme="http://yoursite.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>leetcode binary search practice</title>
    <link href="http://yoursite.com/2018/01/13/leetcode-binary-search-practice.html"/>
    <id>http://yoursite.com/2018/01/13/leetcode-binary-search-practice.html</id>
    <published>2018-01-13T14:23:35.000Z</published>
    <updated>2018-01-14T22:43:01.802Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Binary-search-problems"><a href="#Binary-search-problems" class="headerlink" title="Binary search problems"></a>Binary search problems</h2><p>Typical problems include rotate array. I am not familiar with this kind of problem, especially how to divide them into different situation.<br><a id="more"></a><br>Usually, the end situation written as <code>start &lt; end</code>, so that the final return value can be written as nums[start] to avoid some edge situation. In addition, the mid value calculation should be written as <code>mid = start + (end - start)/2</code> to avoid overflow of number range.</p><h3 id="153-Find-Minimum-in-Rotated-Sorted-Array"><a href="#153-Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="153. Find Minimum in Rotated Sorted Array"></a>153. Find Minimum in Rotated Sorted Array</h3><p>Divide the situation into array rotated &amp; not rotated. If <code>nums[start] &lt; nums[end]</code>, the array is not rotated, simply return nums[0]. Then for the rotated situation, there are 2 cases:</p><ul><li><code>nums[mid] &lt; nums[end] &amp;&amp; nums[mid] &lt; nums[start]</code>, minimum is on left side.</li><li><code>nums[mid] &gt; nums[end] &amp;&amp; nums[mid] &gt; nums[start]</code>, minimum is on right side.<br>Can write <strong>end</strong> side check condition, (if use <strong>start</strong> will have decreasing order edge case.)notice that when change value of start &amp; end need to deal with edge case.(when carry with no equal, update, otherwise, keep)</li></ul><h3 id="33-Search-in-rotated-array"><a href="#33-Search-in-rotated-array" class="headerlink" title="33.Search in rotated array"></a>33.Search in rotated array</h3><p>Same as previous problem, use nums[mid] &amp; nums[right] to judge which part is ordered, then judge target lies in which part to get the result.</p><h3 id="287-Find-the-Duplicate-Number"><a href="#287-Find-the-Duplicate-Number" class="headerlink" title="287. Find the Duplicate Number"></a>287. Find the Duplicate Number</h3><p>Use idea same as <a href="https://leetcode.com/problems/linked-list-cycle-ii/description/" target="_blank" rel="noopener">linkedlist cycle 2</a>. Very tricky to understand array entry since they are all in 1-N range. Just find the entry of the cycle.</p>]]></content>
    
    <summary type="html">
    
      Daily practice of alogorithms. Some tricks in binary search and its variation forms.
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="binary search" scheme="http://yoursite.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>冬日随想@麦迪逊</title>
    <link href="http://yoursite.com/2018/01/12/%E5%86%AC%E6%97%A5%E9%9A%8F%E6%83%B3-%E9%BA%A6%E8%BF%AA%E9%80%8A.html"/>
    <id>http://yoursite.com/2018/01/12/冬日随想-麦迪逊.html</id>
    <published>2018-01-13T01:10:20.000Z</published>
    <updated>2018-01-14T05:42:12.299Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="一个人的麦迪逊"><a href="#一个人的麦迪逊" class="headerlink" title="一个人的麦迪逊"></a>一个人的麦迪逊</h2><p>寒假的最后一周啦，人真的是很矛盾的动物，明知道岁月匆忙，还是忍不住它能走的快一点，大概还是因为有点孤独吧。今天最后一个室友也出门去玩了，自己做个饭放个音乐哼个小曲码几行代码，日子倒也自在。刚暖和了两天的麦屯今天又一下子跌到-12C了。不过想想以后回忆起来还是会感谢这段时光吧，和大一时一样专注地学习和做事，麦屯的天空和湖水会永远留在心底的。</p><h5 id="Basecom-Hall雪景"><a href="#Basecom-Hall雪景" class="headerlink" title="Basecom Hall雪景"></a>Basecom Hall雪景</h5><p><img src="/assets/blogimgs/1.12wisc.jpg" width="80%" height="60%" alt="Basecom Hall雪景"></p><h5 id="CS-Department"><a href="#CS-Department" class="headerlink" title="CS Department"></a>CS Department</h5><p><img src="/assets/blogimgs/1.12cs.jpg" width="80%" height="60%" alt="Basecom Hall雪景"></p><h2 id="音乐分享"><a href="#音乐分享" class="headerlink" title="音乐分享"></a>音乐分享</h2><p>不知从什么时候起爱上了网易云音乐这个App。推送很应景，评论留言的朋友们都有各自各样的感人故事，爱情友情亲情个人奋斗，比小说精彩多了hhh，最关键的是它不封海外IP，还一样能听到我最爱的银临、不才、司夏女神们。<br>今天循环了<strong>山外小楼听夜雨</strong>。一条评论写的很好：<br><blockquote><p>有人问我做中国人是什么体验。我告诉他，认得汉字，识得诗词，赏得风月，闻得茶香，入宫商角徵羽，不知是多少辈子修来的福分。</p></blockquote><br>感谢爸妈，从小让我学民乐背诗词，一个人再孤单的时候也能去音乐中找到一点慰藉。听古风大概听的就是这样一种独特的心境吧。<br>歌词里写的像是苏东坡，料峭春风吹酒醒，一蓑烟雨任平生；也可以是欧阳修，月上柳梢头，人约黄昏后；也是柳三变，惟有长江水，无语东流；不忍登高临远，望故乡渺邈，归思难收。听完之后好像站在南京的长江边上了呀！<br><a id="more"></a><br><blockquote><p>数着春去熟透的红豆 无人黄昏后<br>庭前寒冷深秋为谁消瘦<br>月下惟有我的身影投 该与谁厮守<br>酒入喉却解不了愁<br>芙蓉花又栖满了枝头 奈何蝶难留<br>漂泊如江水向东流<br>望断门前隔岸的杨柳 寂寞仍不休<br>我无言让眼泪长流<br>我独酌山外小阁楼 听一夜相思愁<br>醉后让人烦忧 心事难收<br>山外小阁楼 我乘一叶小舟<br>放思念随风漂流</p></blockquote></p><div class="aplayer" data-id="405597568" data-server="netease" data-type="song"></div>]]></content>
    
    <summary type="html">
    
      今日分享音乐《山外小楼听夜雨》
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="音乐" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="古风" scheme="http://yoursite.com/tags/%E5%8F%A4%E9%A3%8E/"/>
    
  </entry>
  
  <entry>
    <title>leetcode union find practice</title>
    <link href="http://yoursite.com/2018/01/12/leetcode-practice-process.html"/>
    <id>http://yoursite.com/2018/01/12/leetcode-practice-process.html</id>
    <published>2018-01-12T22:23:19.000Z</published>
    <updated>2018-01-14T04:35:28.354Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Union-find-problems"><a href="#Union-find-problems" class="headerlink" title="Union find problems"></a>Union find problems</h2><h3 id="261-Graph-Valid-Tree"><a href="#261-Graph-Valid-Tree" class="headerlink" title="261. Graph Valid Tree"></a>261. Graph Valid Tree</h3><p>This is a typical union find problem. Notice that not only do you need to detect the loop, but also need to detect it is a <strong>connected</strong> graph.<br>Notice that when judge whether 2 components is connected &amp;&amp; union 2 components together, always get to <strong><em>the most far</em></strong> parent nodes.<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] parent, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent[p] == p) <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">return</span> find(parent,parent[p]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span>[] parent, <span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(parent,p) == find(parent, q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span>[] parent, <span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index1 = find(parent, p);</span><br><span class="line">        <span class="keyword">int</span> index2 = find(parent, q);</span><br><span class="line">        <span class="keyword">if</span>(index1 != index2) &#123;</span><br><span class="line">            parent[index1] = index2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validTree</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] edge:edges) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isConnected(parent, edge[<span class="number">0</span>], edge[<span class="number">1</span>]) == <span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            union(parent, edge[<span class="number">0</span>], edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!isConnected(parent, parent[i],parent[<span class="number">0</span>])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Some problems solved by Union-find can also be solved by DFS. For example, lc200,lc547&amp;&amp;lc130. lc130 uses a small trick, which just set an additional node to represent the node in boundary, which can’t be transformed,then expand them into center part.</p>]]></content>
    
    <summary type="html">
    
      key idea of leetcode problems, learn how to use Union find data structure
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="union find" scheme="http://yoursite.com/tags/union-find/"/>
    
  </entry>
  
  <entry>
    <title>Learn to use maven to manage project</title>
    <link href="http://yoursite.com/2018/01/01/Learn-to-use-maven-to-manage-project.html"/>
    <id>http://yoursite.com/2018/01/01/Learn-to-use-maven-to-manage-project.html</id>
    <published>2018-01-01T06:17:35.000Z</published>
    <updated>2018-01-16T01:24:41.641Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="Maven-learn-review"><a href="#Maven-learn-review" class="headerlink" title="Maven learn review"></a>Maven learn review</h3><p>Today I spend some free time learning how to use Maven to manage the dependencies and create project’s structure. This posts will continue to be updated.<br><a id="more"></a></p><h4 id="Basic-instructions"><a href="#Basic-instructions" class="headerlink" title="Basic instructions"></a>Basic instructions</h4><ul><li><code>mvn clean compile</code> will generate target folder, which contains the class files generated by dependencies.</li><li><code>mvn clean test</code> will compile and add Junit test module. Need to add junit dependencies to pom.xml first.</li><li><code>mvn clean package</code> will generate jar file of your project.</li><li><code>mvn clean install</code> will generate your project into the local repository and let other projects be able to depend on it.<h4 id="Write-pom-xml"><a href="#Write-pom-xml" class="headerlink" title="Write pom.xml"></a>Write pom.xml</h4>Write groupId as package name, ArtifactId as project name. Then add dependencies to the <code>&lt;dependencies&gt;&lt;/dependencies&gt;</code> block.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Maven-learn-review&quot;&gt;&lt;a href=&quot;#Maven-learn-review&quot; class=&quot;headerlink&quot; title=&quot;Maven learn review&quot;&gt;&lt;/a&gt;Maven learn review&lt;/h3&gt;&lt;p&gt;Today I spend some free time learning how to use Maven to manage the dependencies and create project’s structure. This posts will continue to be updated.&lt;br&gt;
    
    </summary>
    
    
      <category term="Java EE" scheme="http://yoursite.com/tags/Java-EE/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>ES6 review</title>
    <link href="http://yoursite.com/2017/05/15/ES6-review.html"/>
    <id>http://yoursite.com/2017/05/15/ES6-review.html</id>
    <published>2017-05-16T02:41:18.000Z</published>
    <updated>2018-01-22T00:55:41.074Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="JS-basic"><a href="#JS-basic" class="headerlink" title="JS basic"></a>JS basic</h2><p>JS is OOScripting language.<br>JS on the client side access the DOM.<br>JS on the server side can communicate with databases.<br><a id="more"></a><br>Using <code>&lt;script type = &quot;text/javascript&quot; src=&quot;./index.js&quot;&gt;&lt;/script&gt;</code> to directly use the JS code.<br>DOM enables dynamically generate HTML code. Eg:document.getElementById().innerHTML() = ‘’.<br>var can start with <code>$</code>,no number,no space. Camelcasing var.<br>var data = [];data.push(0),data.pop();<br>onkeypress/onChange事件</p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h4 id="New-features"><a href="#New-features" class="headerlink" title="New features"></a>New features</h4><p>arrow functions, import, const.<br>let a = 5 === var a = 5;<br>local scope vs global scope. {}.differenciate from closure.{work in its self scope}<br>`` as template string. ${}<br>[10,…a,50];spread operator concatenate.<br>function(…a){}, gathering all parameters into an array.<br>let [name,parent] = a;<br>()=&gt;,no this contained. Annoynous function expression{<br>    function() {};<br>}<br>.map(function)/filter(boolean test). string.repeat(50)/startsWith()/includes(). Safe integer: Number.isSafeInteger(number).<br>module: split code into file based on relevance. export default add; import add from “math.js”/import {multiply} from “math.js”.</p><h4 id="Webpack-amp-Babel"><a href="#Webpack-amp-Babel" class="headerlink" title="Webpack &amp; Babel"></a>Webpack &amp; Babel</h4><p>Using webpack(打包工具) &amp;&amp; Babel to let JS be compatible with the browser. Basically they are transpilier, generate code to olderjs.<br>webpack bundles multiple modules into one js file, come with dev-server, update timely.<br>npm install webpack –save-dev.<br>npm install babel-core babel-loader webpack-dev-server babel-preset-es2015 babel-polyfill –save-dev.<br>npm install –save-dev babel-preset-react.<br>webpack.config.js:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">    entry: [<span class="string">'babel-polyfill'</span>,<span class="string">'./app/index.js'</span>],</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:__dirname + <span class="string">'/build'</span>,</span><br><span class="line">        filename:<span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>:&#123;</span><br><span class="line">        loaders:[</span><br><span class="line">            &#123;</span><br><span class="line">                loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">                test:/\js$/,</span><br><span class="line">                exclude:/node_modules/</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        contentBase:<span class="string">"./build"</span>,</span><br><span class="line">        inline:<span class="keyword">true</span> <span class="comment">// automatically update code</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>package.json:<code>script:&quot;build&quot;:&quot;webpack&quot;</code>. add <code>&quot;babel&quot;:{&quot;presets&quot;:[&quot;es2015&quot;] }</code>, <code>&quot;start&quot;: &quot;webpack-dev-server&quot;</code>.</p><h4 id="Classes-in-ES6"><a href="#Classes-in-ES6" class="headerlink" title="Classes in ES6"></a>Classes in ES6</h4><ol><li>relate each other with Inheritence</li><li>Defined with <strong>class</strong> keyword and assign data with <strong>constructor</strong> function.</li><li>Use <strong>extends</strong> keyword to generate child classes. Child classes has all properties of parent classes. Use <strong>super(arg1, arg2)</strong> to use parent properties.</li><li>Static methods in class. Can use all methods in this class using class name.</li><li>Classes &amp; Prototypes. Object-oriented programming:object hold data interact with each other. JS is not, prototypal inheritence model. Classes are extractions of prototypes. <strong>A prototype reveals object’s parent</strong>. All objects has prototypes(Date,array). Prototype chain: top is object.</li><li>class.prototype.func = function(){}; add a new method to the class. prototypes are simply functions. Must use function to generate because ()=&gt; has no this contained.<h4 id="Data-structure-in-ES6"><a href="#Data-structure-in-ES6" class="headerlink" title="Data structure in ES6"></a>Data structure in ES6</h4></li><li>Set(). let a = new Set(can contains arg). a.add() can add all different var. a.has(). for(let element of a.values()){element+=1;}</li><li>Map(). map.size(). key can be anything rather than object’s key can only be string. a.set(key,value)/get(key), a.has(). key can be object/function/string; for(let [key,value] of map.entries()); <h4 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h4></li><li><strong>Closures refers to functions that remember the environment they are created in and can reference independent variable within this env. Closures combine functions with environment within which we declare that function</strong>. 是函数独有的特性，普通block是可以引用到的。function内部的function/data 外部直接引用不到。</li><li>Enables function factories: function return function. Enable private data, in js can’t do it directly, can emulate this behavior.</li><li>Lexical scoping refers to function use a var to keep tracks of where it can access. <strong>All local var only lasts through the completion of function, but can use closures still access the data</strong>. eg: let fun = ()=&gt;{a=2;let help=()=&gt;{consoloe.log(a);}return help}; let ano = fun;ano() can access a.</li><li>let addSurfix = (x)=&gt;{ const concat = (y)=&gt;{return y+x;} return concat;}. let addness = addSurfix(“ness”)(this will generate a function, concat).let h = addness(“happi), h() shows happiness.<h4 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h4></li><li>break typical run to complete model in normal functions. Generators can pause in the middle and resume later, with <strong>yield(),next()</strong>.  Yield tells function to pause and return current state.</li><li>enable construct control-flow functions and iterators. function* maker(){yield count+=3;} let ano = maker();ano.next().value;建立一个generator的实例。eg:help generate IDs/counter.</li><li>Generator vs iterator, write your own iterator.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayIndex = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(index &lt; array.length()) &#123;</span><br><span class="line">                <span class="keyword">let</span> next = array[index];</span><br><span class="line">                index +=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = arrayIndex([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iterator</span> = (<span class="params">array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> it = iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">it.next().value;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Asynchronous-programming-amp-Promises"><a href="#Asynchronous-programming-amp-Promises" class="headerlink" title="Asynchronous programming &amp; Promises"></a>Asynchronous programming &amp; Promises</h4><ol><li>Asynchronous programming divert block to event handler. Running on a looped engine, keeps a program running without block.</li><li>Important reason: (1)User interfaces &amp; browser are asynchrounous in nature. function diverted to handler and processed in background. Async enables interation with DB, API.</li><li>Promises handles aync in ES6(before callback). Promises presented in 3 states:<strong>pending, fulfilled, rejected</strong>.</li><li>resolve &amp; reject represents handlers that gives a function to update the state of promise. reject means promise can’t determine a value. <strong>Accessing the promise data as consuming the process.</strong>Use a promise.then() which accepts function gets promise’s return value once it is fulfilled.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">'Resolved a promise'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">respose</span>=&gt;</span><span class="built_in">console</span>.log(response))<span class="comment">//Consuming the processed data</span></span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise doesn't resolved immediately</span></span><br><span class="line"><span class="keyword">new</span> Promsie(setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>resolve(<span class="string">'dsad'</span>),<span class="number">3000</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after promise'</span>);</span><br><span class="line"><span class="comment">// Can still run the code after the promise</span></span><br></pre></td></tr></table></figure><h4 id="HTTP-methods"><a href="#HTTP-methods" class="headerlink" title="HTTP methods"></a>HTTP methods</h4>Defines how data communicated through Internet.</li></ol><ul><li>GET:retrieve data and has no side effect</li><li>POST:add resources to server</li><li>HEAD, DELETE, PATCH<br>fetch(url,{method:”GET”}), returns a promise containing the result of that call. .json() returns another promise contained in th returned result. .then(response=&gt;response.json()).then(jsons=&gt;console.log(jsons)).<h4 id="ES7-amp-amp-ES8"><a href="#ES7-amp-amp-ES8" class="headerlink" title="ES7 &amp;&amp; ES8"></a>ES7 &amp;&amp; ES8</h4>ES7</li></ul><ol><li>exponential operator,2**5-32.</li><li>support for arrays. arr.includes(2) == true<br>npm install babel-preset-es2016 babel-preset-es2017<br>ES8</li><li>access object manipulate with .values()+.entries()<br>let a ={‘a’:1,’b’:2};let keys = Object.keys(a)/values(a);<br>let entries = Object.entries(a);<br>for(let cur of entries) {cur[0]}</li><li>Async. don’t want logic to continue until get relavant data in functions. Use await to temprtial stop the execution of statements and logic until finishes returning a promises.</li></ol><p>CSS3<br>column-count:3<br>column-rule:线型<br>column-gap:40px;之间的间距</p><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。越大离用户越近。</p><p><left></left></p><p><right></right></p><p><main><br>.left {<br>    float:left;<br>    width:200px;<br>}<br>.right {<br>    float:right;<br>    width:200px;<br>}<br>.main {<br>    margin-left:200px;<br>    margin-right:200px;<br>}</main></p><p>{<br>    position:absolute;<br>    width:400px<br>    height:400px;<br>    top:50%;<br>    left:50%;<br>    margin-top:-200px;<br>    margin-left:-200px;<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS-basic&quot;&gt;&lt;a href=&quot;#JS-basic&quot; class=&quot;headerlink&quot; title=&quot;JS basic&quot;&gt;&lt;/a&gt;JS basic&lt;/h2&gt;&lt;p&gt;JS is OOScripting language.&lt;br&gt;JS on the client side access the DOM.&lt;br&gt;JS on the server side can communicate with databases.&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
</feed>
